// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: social_graph_service.proto

package social_graph

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SocialGraphServiceClient is the client API for SocialGraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialGraphServiceClient interface {
	RegisterUser(ctx context.Context, in *SocialGraphUser, opts ...grpc.CallOption) (*empty.Empty, error)
	RegisterBusinessUser(ctx context.Context, in *SocialGraphBusinessUser, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckVisibility(ctx context.Context, in *SocialGraphUsername, opts ...grpc.CallOption) (*SocialGraphVisibilityUserResponse, error)
	GetMyFollowers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SocialGraphFollowers, error)
	SocialGraphUpdateUser(ctx context.Context, in *SocialGraphUpdatedUser, opts ...grpc.CallOption) (*empty.Empty, error)
	GetTargetGroupUser(ctx context.Context, in *SocialGraphTargetUsersGroup, opts ...grpc.CallOption) (*SocialGraphTargetUsers, error)
}

type socialGraphServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialGraphServiceClient(cc grpc.ClientConnInterface) SocialGraphServiceClient {
	return &socialGraphServiceClient{cc}
}

func (c *socialGraphServiceClient) RegisterUser(ctx context.Context, in *SocialGraphUser, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/social_graph.SocialGraphService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphServiceClient) RegisterBusinessUser(ctx context.Context, in *SocialGraphBusinessUser, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/social_graph.SocialGraphService/RegisterBusinessUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphServiceClient) CheckVisibility(ctx context.Context, in *SocialGraphUsername, opts ...grpc.CallOption) (*SocialGraphVisibilityUserResponse, error) {
	out := new(SocialGraphVisibilityUserResponse)
	err := c.cc.Invoke(ctx, "/social_graph.SocialGraphService/CheckVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphServiceClient) GetMyFollowers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SocialGraphFollowers, error) {
	out := new(SocialGraphFollowers)
	err := c.cc.Invoke(ctx, "/social_graph.SocialGraphService/GetMyFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphServiceClient) SocialGraphUpdateUser(ctx context.Context, in *SocialGraphUpdatedUser, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/social_graph.SocialGraphService/SocialGraphUpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphServiceClient) GetTargetGroupUser(ctx context.Context, in *SocialGraphTargetUsersGroup, opts ...grpc.CallOption) (*SocialGraphTargetUsers, error) {
	out := new(SocialGraphTargetUsers)
	err := c.cc.Invoke(ctx, "/social_graph.SocialGraphService/GetTargetGroupUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialGraphServiceServer is the server API for SocialGraphService service.
// All implementations must embed UnimplementedSocialGraphServiceServer
// for forward compatibility
type SocialGraphServiceServer interface {
	RegisterUser(context.Context, *SocialGraphUser) (*empty.Empty, error)
	RegisterBusinessUser(context.Context, *SocialGraphBusinessUser) (*empty.Empty, error)
	CheckVisibility(context.Context, *SocialGraphUsername) (*SocialGraphVisibilityUserResponse, error)
	GetMyFollowers(context.Context, *empty.Empty) (*SocialGraphFollowers, error)
	SocialGraphUpdateUser(context.Context, *SocialGraphUpdatedUser) (*empty.Empty, error)
	GetTargetGroupUser(context.Context, *SocialGraphTargetUsersGroup) (*SocialGraphTargetUsers, error)
	mustEmbedUnimplementedSocialGraphServiceServer()
}

// UnimplementedSocialGraphServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSocialGraphServiceServer struct {
}

func (UnimplementedSocialGraphServiceServer) RegisterUser(context.Context, *SocialGraphUser) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedSocialGraphServiceServer) RegisterBusinessUser(context.Context, *SocialGraphBusinessUser) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBusinessUser not implemented")
}
func (UnimplementedSocialGraphServiceServer) CheckVisibility(context.Context, *SocialGraphUsername) (*SocialGraphVisibilityUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVisibility not implemented")
}
func (UnimplementedSocialGraphServiceServer) GetMyFollowers(context.Context, *empty.Empty) (*SocialGraphFollowers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyFollowers not implemented")
}
func (UnimplementedSocialGraphServiceServer) SocialGraphUpdateUser(context.Context, *SocialGraphUpdatedUser) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SocialGraphUpdateUser not implemented")
}
func (UnimplementedSocialGraphServiceServer) GetTargetGroupUser(context.Context, *SocialGraphTargetUsersGroup) (*SocialGraphTargetUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetGroupUser not implemented")
}
func (UnimplementedSocialGraphServiceServer) mustEmbedUnimplementedSocialGraphServiceServer() {}

// UnsafeSocialGraphServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialGraphServiceServer will
// result in compilation errors.
type UnsafeSocialGraphServiceServer interface {
	mustEmbedUnimplementedSocialGraphServiceServer()
}

func RegisterSocialGraphServiceServer(s grpc.ServiceRegistrar, srv SocialGraphServiceServer) {
	s.RegisterService(&SocialGraphService_ServiceDesc, srv)
}

func _SocialGraphService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialGraphUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social_graph.SocialGraphService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServiceServer).RegisterUser(ctx, req.(*SocialGraphUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraphService_RegisterBusinessUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialGraphBusinessUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServiceServer).RegisterBusinessUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social_graph.SocialGraphService/RegisterBusinessUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServiceServer).RegisterBusinessUser(ctx, req.(*SocialGraphBusinessUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraphService_CheckVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialGraphUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServiceServer).CheckVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social_graph.SocialGraphService/CheckVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServiceServer).CheckVisibility(ctx, req.(*SocialGraphUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraphService_GetMyFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServiceServer).GetMyFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social_graph.SocialGraphService/GetMyFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServiceServer).GetMyFollowers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraphService_SocialGraphUpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialGraphUpdatedUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServiceServer).SocialGraphUpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social_graph.SocialGraphService/SocialGraphUpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServiceServer).SocialGraphUpdateUser(ctx, req.(*SocialGraphUpdatedUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraphService_GetTargetGroupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialGraphTargetUsersGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServiceServer).GetTargetGroupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social_graph.SocialGraphService/GetTargetGroupUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServiceServer).GetTargetGroupUser(ctx, req.(*SocialGraphTargetUsersGroup))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialGraphService_ServiceDesc is the grpc.ServiceDesc for SocialGraphService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialGraphService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "social_graph.SocialGraphService",
	HandlerType: (*SocialGraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _SocialGraphService_RegisterUser_Handler,
		},
		{
			MethodName: "RegisterBusinessUser",
			Handler:    _SocialGraphService_RegisterBusinessUser_Handler,
		},
		{
			MethodName: "CheckVisibility",
			Handler:    _SocialGraphService_CheckVisibility_Handler,
		},
		{
			MethodName: "GetMyFollowers",
			Handler:    _SocialGraphService_GetMyFollowers_Handler,
		},
		{
			MethodName: "SocialGraphUpdateUser",
			Handler:    _SocialGraphService_SocialGraphUpdateUser_Handler,
		},
		{
			MethodName: "GetTargetGroupUser",
			Handler:    _SocialGraphService_GetTargetGroupUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "social_graph_service.proto",
}
