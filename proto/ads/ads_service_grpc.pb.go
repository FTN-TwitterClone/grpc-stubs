// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: ads_service.proto

package ads

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdsServiceClient is the client API for AdsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdsServiceClient interface {
	SaveAdInfo(ctx context.Context, in *AdInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	SaveLikeEvent(ctx context.Context, in *LikeEvent, opts ...grpc.CallOption) (*empty.Empty, error)
	SaveUnlikeEvent(ctx context.Context, in *UnlikeEvent, opts ...grpc.CallOption) (*empty.Empty, error)
}

type adsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdsServiceClient(cc grpc.ClientConnInterface) AdsServiceClient {
	return &adsServiceClient{cc}
}

func (c *adsServiceClient) SaveAdInfo(ctx context.Context, in *AdInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ads.AdsService/SaveAdInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsServiceClient) SaveLikeEvent(ctx context.Context, in *LikeEvent, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ads.AdsService/SaveLikeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsServiceClient) SaveUnlikeEvent(ctx context.Context, in *UnlikeEvent, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ads.AdsService/SaveUnlikeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdsServiceServer is the server API for AdsService service.
// All implementations must embed UnimplementedAdsServiceServer
// for forward compatibility
type AdsServiceServer interface {
	SaveAdInfo(context.Context, *AdInfo) (*empty.Empty, error)
	SaveLikeEvent(context.Context, *LikeEvent) (*empty.Empty, error)
	SaveUnlikeEvent(context.Context, *UnlikeEvent) (*empty.Empty, error)
	mustEmbedUnimplementedAdsServiceServer()
}

// UnimplementedAdsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdsServiceServer struct {
}

func (UnimplementedAdsServiceServer) SaveAdInfo(context.Context, *AdInfo) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAdInfo not implemented")
}
func (UnimplementedAdsServiceServer) SaveLikeEvent(context.Context, *LikeEvent) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLikeEvent not implemented")
}
func (UnimplementedAdsServiceServer) SaveUnlikeEvent(context.Context, *UnlikeEvent) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUnlikeEvent not implemented")
}
func (UnimplementedAdsServiceServer) mustEmbedUnimplementedAdsServiceServer() {}

// UnsafeAdsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdsServiceServer will
// result in compilation errors.
type UnsafeAdsServiceServer interface {
	mustEmbedUnimplementedAdsServiceServer()
}

func RegisterAdsServiceServer(s grpc.ServiceRegistrar, srv AdsServiceServer) {
	s.RegisterService(&AdsService_ServiceDesc, srv)
}

func _AdsService_SaveAdInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsServiceServer).SaveAdInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsService/SaveAdInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsServiceServer).SaveAdInfo(ctx, req.(*AdInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsService_SaveLikeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsServiceServer).SaveLikeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsService/SaveLikeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsServiceServer).SaveLikeEvent(ctx, req.(*LikeEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsService_SaveUnlikeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsServiceServer).SaveUnlikeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsService/SaveUnlikeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsServiceServer).SaveUnlikeEvent(ctx, req.(*UnlikeEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// AdsService_ServiceDesc is the grpc.ServiceDesc for AdsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ads.AdsService",
	HandlerType: (*AdsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveAdInfo",
			Handler:    _AdsService_SaveAdInfo_Handler,
		},
		{
			MethodName: "SaveLikeEvent",
			Handler:    _AdsService_SaveLikeEvent_Handler,
		},
		{
			MethodName: "SaveUnlikeEvent",
			Handler:    _AdsService_SaveUnlikeEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ads_service.proto",
}
